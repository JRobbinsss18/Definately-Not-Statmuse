from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
import os
from datetime import datetime
import tempfile

class NBAReportExporter:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Title'],
            fontSize=18,
            textColor=colors.darkblue,
            spaceAfter=20,
            alignment=TA_CENTER
        )
        self.heading_style = ParagraphStyle(
            'CustomHeading',
            parent=self.styles['Heading2'],
            fontSize=14,
            textColor=colors.darkblue,
            spaceBefore=12,
            spaceAfter=6
        )
        
    def export_query_report(self, query: str, analysis: str, query_type: str, data: dict = None) -> str:
        """Export NBA query analysis to PDF"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"NBA_Report_{timestamp}.pdf"
        filepath = os.path.join(tempfile.gettempdir(), filename)
        
        doc = SimpleDocTemplate(filepath, pagesize=A4)
        story = []
        
        title = Paragraph("NBA Sports Muse Report", self.title_style)
        story.append(title)
        story.append(Spacer(1, 12))
        
        query_info = [
            ['Query:', query],
            ['Query Type:', query_type.replace('_', ' ').title()],
            ['Generated:', datetime.now().strftime("%B %d, %Y at %I:%M %p")]
        ]
        
        query_table = Table(query_info, colWidths=[1.5*inch, 4*inch])
        query_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(query_table)
        story.append(Spacer(1, 20))
        
        story.append(Paragraph("Analysis Results", self.heading_style))
        
        analysis_clean = self._clean_analysis_text(analysis)
        
        sections = analysis_clean.split('\n\n')
        
        for section in sections:
            if section.strip():
                if section.startswith('**') and section.endswith('**'):
                    header_text = section.strip('*')
                    story.append(Paragraph(header_text, self.heading_style))
                elif section.startswith('- '):
                    bullet_text = section.replace('- ', 'â€¢ ')
                    story.append(Paragraph(bullet_text, self.styles['Normal']))
                else:
                    story.append(Paragraph(section, self.styles['Normal']))
                story.append(Spacer(1, 6))
        
        if data:
            story.append(Spacer(1, 20))
            story.append(Paragraph("Data Summary", self.heading_style))
            
            data_summary = self._extract_data_summary(data, query_type)
            if data_summary:
                data_table = Table(data_summary, colWidths=[2*inch, 3*inch])
                data_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.beige, colors.white]),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(data_table)
        
        story.append(Spacer(1, 30))
        footer = Paragraph(
            "Generated by NBA Sports Muse - Advanced Basketball Analytics Platform", 
            self.styles['Italic']
        )
        story.append(footer)
        
        doc.build(story)
        
        return filepath
    
    def _clean_analysis_text(self, analysis: str) -> str:
        """Clean analysis text for PDF formatting"""
        analysis = analysis.replace('##', '')
        analysis = analysis.replace('---', '')
        
        import re
        analysis = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', analysis)
        
        return analysis
    
    def _extract_data_summary(self, data: dict, query_type: str) -> list:
        """Extract key data points for summary table"""
        summary = []
        
        if query_type == 'compare_players':
            if 'player1_name' in data and 'player2_name' in data:
                summary.append(['Player 1', data['player1_name']])
                summary.append(['Player 2', data['player2_name']])
                
                if 'player1_stats' in data and not data['player1_stats'].empty:
                    p1_seasons = len(data['player1_stats'])
                    summary.append(['Player 1 Seasons', str(p1_seasons)])
                
                if 'player2_stats' in data and not data['player2_stats'].empty:
                    p2_seasons = len(data['player2_stats'])
                    summary.append(['Player 2 Seasons', str(p2_seasons)])
        
        elif query_type == 'analyze_team':
            if 'team_name' in data:
                summary.append(['Team', data['team_name']])
                
            if 'season' in data:
                summary.append(['Season(s)', data['season']])
                
            if 'team_stats' in data and not data['team_stats'].empty:
                team_stats = data['team_stats']
                summary.append(['Data Points', f"{len(team_stats)} seasons"])
                
                if 'WINS' in team_stats.columns:
                    total_wins = team_stats['WINS'].sum()
                    total_losses = team_stats['LOSSES'].sum()
                    summary.append(['All-Time Record', f"{total_wins}-{total_losses}"])
        
        elif query_type in ['analyze_player', 'explain_analysis']:
            if 'player_name' in data:
                summary.append(['Player', data['player_name']])
                
            if 'career_stats' in data and not data['career_stats'].empty:
                career_stats = data['career_stats']
                summary.append(['Career Seasons', str(len(career_stats))])
        
        elif query_type == 'predict_player':
            if 'player_name' in data:
                summary.append(['Player', data['player_name']])
                
            if 'predictions' in data:
                summary.append(['Predicted Stats', str(len(data['predictions']))])
        
        return summary